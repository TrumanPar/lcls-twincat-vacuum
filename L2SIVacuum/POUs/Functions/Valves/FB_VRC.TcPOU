<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_VRC" Id="{2db6a988-e12f-4920-baa1-9b034d8c1cf9}" SpecialFunc="None">
    <Declaration><![CDATA[(* This Function Block Implements Basic Functionality for certain types of valves e.g Turbo Isolation valves, Apperture Valve.
This function block is interloked by an input (i_xExtILK_OK). This is so developers can interface with custom
interlocking logic outside this function block.*)
(* Note Interlock Logic is External *)
FUNCTION_BLOCK FB_VRC EXTENDS FB_Valve
VAR_IN_OUT
	
END_VAR
VAR_INPUT
	{attribute 'pytmc' := '
	pv: EXT_ILK_OK ;
	field: ZNAM NOT OK ;
	field: ONAM OK ;
	io: i ;
	'}
	i_xExtILK_OK : BOOL; //Connect to Interlock logic condition(e.g F_TURBO_VRC_ILK Function), otherwise, Set to True if the valve is not interlocked
	i_xOverrideMode : BOOL; (*To be linked to global override bit. This Overrides Vacuum logic only, EPS, MPS and PMPS are still enforces*)
END_VAR
VAR_OUTPUT
	{attribute 'pytmc' := '
    pv:
	'}
	iq_stValve : ST_VRC;
END_VAR
VAR
	{attribute 'instance-path'}
	{attribute 'noinit'}
	sPath: STRING;
	xFirstPass	:	BOOL;
	fbFSInit		:	R_TRIG;
	tonOvrd	:	TON;
	tonDelOK : TON;
	rtOK	:	R_TRIG;
	tOvrd	:	TIME := T#10s;
	(* Timeouts*)
	tTimeOutDuration: TIME:= T#10S;
	tOPNtimeout: TON;
	tCLStimeout:TON;
	
	
	(*IO*)
	i_xOpnLS	AT%I*: BOOL;
	i_xClsLS	AT%I*: BOOL;
	q_xOPN_DO	AT%Q*: BOOL;
	sErrorMessage: INT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[
(* On first PLC pass, put valve into vented state, which implies a closed valve *)
fbFSInit( CLK := TRUE, Q => xFirstPass);
IF xFirstPass THEN
	iq_stValve.eVGC_State := Vented;
	iq_stValve.pv_xOPN_SW := FALSE;
END_IF




///Check valve postion
IF iq_stValve.i_xClsLS AND  iq_stValve.i_xOpnLS THEN
	iq_stValve.eState:=INVALID;
ELSIF NOT iq_stValve.i_xClsLS AND iq_stValve.i_xOpnLS AND iq_stValve.q_xOPN_DO THEN 
	iq_stValve.eState:=OPEN;
ELSIF iq_stValve.i_xClsLS AND NOT iq_stValve.i_xOpnLS AND NOT iq_stValve.q_xOPN_DO THEN 
	iq_stValve.eState:=CLOSED;
ELSIF NOT iq_stValve.i_xClsLS AND NOT iq_stValve.i_xOpnLS THEN 
	iq_stValve.eState:=MOVING;
ELSE
	iq_stValve.eState:=INVALID;
END_IF


(*evaluate Valve open external interlock*)
iq_stValve.xOPN_OK := i_xExtILK_OK;
IF NOT iq_stValve.xOPN_OK and NOT tonOvrd.Q THEN
	iq_stValve.pv_xOPN_SW := FALSE;
	iq_stValve.eVGC_State := ERR_ExtFault;
END_IF

IF (iq_stValve.q_xOPN_DO) AND (iq_stValve.xOPN_OK) THEN
	iq_stValve.eVGC_State := AtVacuum;
END_IF
	

(* Override logic *)
(* Goal: give ability to override, but do so in a way that people won't forget it.
Solution: Override only after ten seconds of override, protect against blips,
when the valve permission goes true for more than ten seconds consistently, remove override
*)

tonDelOK(IN:=iq_stValve.xOPN_OK, PT:=T#10S);
rtOK(CLK:=tonDelOK.Q);
IF rtOK.Q THEN 
	iq_stValve.pv_xOvrdOpn :=FALSE; 
	iq_stValve.pv_xOPN_SW := TRUE; //for seamless transition
    //Log
    fbLogger(sMsg:='Override expired', eSevr:=TcEventSeverity.Warning);
    
END_IF

//Override timer
tonOvrd(IN:=iq_stValve.pv_xOvrdOpn, PT:=tOvrd);

(* Here's where the valve opens *)
iq_stValve.q_xOPN_DO := (iq_stValve.pv_xOPN_SW AND iq_stValve.xOPN_OK) OR (tonOvrd.Q AND i_xOverrideMode);


///Check valve moving postion timout
IF NOT iq_stValve.i_xClsLS AND tCLStimeout.Q THEN 
	iq_stValve.bErrorPresent := TRUE;
	iq_stValve.sErrorMessage := ' Close Timeout';
ELSIF NOT iq_stValve.i_xOpnLS AND tOPNtimeout.Q THEN 
	iq_stValve.bErrorPresent := TRUE; 
	iq_stValve.sErrorMessage := ' Open Timeout';
END_IF
IF (iq_stValve.eState=INVALID) THEN
	iq_stValve.bErrorPresent := TRUE; 
	iq_stValve.sErrorMessage := CONCAT(sPath,' Invalid Valve Position');
END_IF

(*Timers*)
tOPNtimeout(IN:= iq_stValve.q_xOPN_DO, PT := tTimeOutDuration );
tCLStimeout(IN:= NOT iq_stValve.q_xOPN_DO, PT := tTimeOutDuration);


(*Soft IO Mapping*)
ACT_IO();

// Log States and triggers
ACT_Logger();]]></ST>
    </Implementation>
    <Action Name="ACT_IO" Id="{71e6a07b-f8a4-4ad9-819a-47adf702a688}">
      <Implementation>
        <ST><![CDATA[(*inputs*)
iq_stValve.i_xOpnLS := 	i_xOpnLS;
iq_stValve.i_xClsLS:=	i_xClsLS;
iq_stValve.xOverrideMode := i_xOverrideMode;
(*outputs*)
q_xOPN_DO:= iq_stValve.q_xOPN_DO;]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Logger" Id="{2618c8c0-2f2b-4d3f-ad1a-f6d80a8c3ba6}">
      <Implementation>
        <ST><![CDATA[// ILK logger

IF NOT i_xExtILK_OK AND ePrevState = OPEN THEN
 		fbLogger(sMsg:='Lost external interlock while valve was open.', eSevr:=TcEventSeverity.Critical);  	
END_IF


//STATE Logger  

IF ePrevState <> iq_stValve.eState THEN
	  CASE iq_stValve.eState OF
		INVALID:
			fbLogger(sMsg:='Valve invalid position.', eSevr:=TcEventSeverity.Critical);
  		MOVING:
			fbLogger(sMsg:='Valve moving', eSevr:=TcEventSeverity.Warning);
		OPEN:
			fbLogger(sMsg:='Valve Open.', eSevr:=TcEventSeverity.Info);
		CLOSED:
			fbLogger(sMsg:='Valve closed.', eSevr:=TcEventSeverity.Info);
	  END_CASE
	  ePrevState := iq_stValve.eState;  
  END_IF
  


// Log valve timeouts
tErrorPresent(CLK:=iq_stValve.bErrorPresent);
IF tErrorPresent.Q THEN fbLogger(sMsg:=iq_stValve.sErrorMessage, eSevr:=TcEventSeverity.Warning); END_IF

// Log valve open
tAction(CLK:= iq_stValve.q_xOPN_DO);
IF tAction.Q THEN fbLogger(sMsg:='Valve commanded open', eSevr:=TcEventSeverity.Info); END_IF

// Log override mode enabled
tOverrideActivated(CLK:= (tonOvrd.Q AND i_xOverrideMode));
IF tOverrideActivated.Q THEN fbLogger(sMsg:='Valve override mode activated', eSevr:=TcEventSeverity.Warning); END_IF
]]></ST>
      </Implementation>
    </Action>
    <Method Name="M_Set_OPN_SW" Id="{87b0c242-3ded-4d47-af63-cf02c359390b}">
      <Declaration><![CDATA[// Use this Methode to Open or close the valve by setting the OPN_SW to the input value.
METHOD PUBLIC M_Set_OPN_SW : BOOL
VAR_INPUT
	value:BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[This^.iq_stValve.pv_xOPN_SW := value;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_VRC">
      <LineId Id="87" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="134" Count="0" />
      <LineId Id="129" Count="3" />
      <LineId Id="125" Count="2" />
      <LineId Id="3" Count="0" />
      <LineId Id="135" Count="10" />
      <LineId Id="13" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="89" Count="1" />
      <LineId Id="14" Count="2" />
      <LineId Id="148" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="149" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="152" Count="1" />
      <LineId Id="150" Count="1" />
      <LineId Id="19" Count="7" />
      <LineId Id="221" Count="0" />
      <LineId Id="226" Count="1" />
      <LineId Id="223" Count="2" />
      <LineId Id="27" Count="5" />
      <LineId Id="55" Count="0" />
      <LineId Id="196" Count="1" />
      <LineId Id="200" Count="10" />
      <LineId Id="198" Count="1" />
      <LineId Id="216" Count="3" />
      <LineId Id="56" Count="0" />
      <LineId Id="62" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="193" Count="1" />
      <LineId Id="192" Count="0" />
    </LineIds>
    <LineIds Name="FB_VRC.ACT_IO">
      <LineId Id="2" Count="2" />
      <LineId Id="6" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="1" Count="0" />
    </LineIds>
    <LineIds Name="FB_VRC.ACT_Logger">
      <LineId Id="66" Count="4" />
      <LineId Id="64" Count="1" />
      <LineId Id="1" Count="0" />
      <LineId Id="21" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="2" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="13" Count="0" />
      <LineId Id="8" Count="0" />
      <LineId Id="15" Count="0" />
      <LineId Id="9" Count="0" />
      <LineId Id="16" Count="0" />
      <LineId Id="10" Count="0" />
      <LineId Id="17" Count="0" />
      <LineId Id="5" Count="1" />
      <LineId Id="3" Count="0" />
      <LineId Id="18" Count="0" />
      <LineId Id="29" Count="1" />
      <LineId Id="52" Count="10" />
      <LineId Id="22" Count="0" />
    </LineIds>
    <LineIds Name="FB_VRC.M_Set_OPN_SW">
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>