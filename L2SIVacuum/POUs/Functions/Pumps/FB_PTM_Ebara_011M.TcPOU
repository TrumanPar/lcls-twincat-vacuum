<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4020.12">
  <POU Name="FB_PTM_Ebara_011M" Id="{80002545-2d80-4798-8b5d-b360277946fd}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_PTM_Ebara_011M
VAR_IN_OUT
END_VAR
VAR_INPUT
	i_rMaxBackingPressure : REAL := 0.01;
	i_iMinSpeedRPM : DINT := 100; //check pump manual for setting
	i_iMaxSpeedRPM : DINT := 33600; // check pump manual for setting

END_VAR
VAR_OUTPUT
	{attribute 'pytmc' := '
    pv: 
	'}
	iq_stPTM : ST_EbaraPTM;
END_VAR
VAR
	TOF_SetSpeed: TOF := (PT:=T#1S);
	TOF_RESET: TOF :=(PT:=T#1S);
	i_iADCBits : UINT := 15;
	(*IO*)
	(*inputs*)
	i_xDecel AT %I* : BOOL; //Link to brake input
	i_xAccel AT %I* : BOOL;
	i_xRotate AT %I* : BOOL;
	i_xNCFault AT %I* : BOOL;// remove?
	i_xAtSpd AT %I* : BOOL;
	i_iRawSpeed AT %I* : INT; // Link to Analog input
	
	(*output*)
	q_xStart AT %Q* : BOOL; // link to output
	q_xStop AT %Q* : BOOL; //Link to output
	q_xReset AT %Q* : BOOL;
	q_xProtection AT %Q* : BOOL;
	q_xSetSpeed AT %Q* : BOOL;
	q_iSpeedSet AT %Q* :INT;	//Link to analog Output
	
	
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* Ebara ETC control FB
Scott Stubbs & Alex W.
Modified Nov 2018 by M. Ghaly
*)

(* Switch processing *)
//TOF_START.IN := iq_stPTM.i_xStart;
//TOF_START();
//TOF_STOP.IN  := iq_stPTM.i_xStop;
//TOF_STOP();
//TOF_RESET.IN := iq_stPTM.i_xReset;
//TOF_RESET();

(* Simple protection reset *)
iq_stPTM.q_xProtection := iq_stPTM.xExtRunOk;

(* Basic pump supervisory section *)
	(* If override mode, ignore everything else *)
IF iq_stPTM.i_xOverride THEN
	IF iq_stPTM.xRunSW THEN
		iq_stPTM.q_RunDO:=TRUE;
	ELSE
		iq_stPTM.q_RunDO:=FALSE;
	END_IF
	//Handle faults - the way the Ebara cable is done, xFault is normally closed
ELSIF iq_stPTM.i_xFault OR (iq_stPTM.q_RunDO AND NOT iq_stPTM.xExtRunOk) THEN
	iq_stPTM.q_RunDO:=FALSE;
	iq_stPTM.q_xProtection:=FALSE;
	//And one for when we need to start the pump normally. Only allows pump to be started if ILK ok.
ELSIF iq_stPTM.xRunSW AND iq_stPTM.xExtRunOk THEN
	iq_stPTM.q_RunDO:=TRUE;
//One section for when pump is told to stop
IF NOT iq_stPTM.xRunSW THEN
		iq_stPTM.q_RunDO:=FALSE;
		IF (NOT iq_stPTM.i_xFault) AND (NOT iq_stPTM.i_xALARM) THEN iq_stPTM.eState := pumpSTOPPED; END_IF;
END_IF 

//Set the Start and Stop outputs to Run do . check manual.
iq_stPTM.q_xStart := iq_stPTM.q_xStop := iq_stPTM.q_RunDO;

(* to reset the Input speed OK bit *)
 TOF_SetSpeed (IN:= iq_stPTM.iq_xSpeedSet, Q => );
 IF NOT (TOF_SetSpeed.Q) THEN iq_stPTM.iq_xSpeedSet:= FALSE; 
 END_IF
 (* to reset the Reset Bit *)
 IF (iq_stPTM.xResetSW ) THEN  iq_stPTM.q_xReset := TRUE; 
 END_IF
 TOF_RESET (IN:= iq_stPTM.q_xReset, Q => );
 IF NOT (TOF_RESET.Q) THEN 
	iq_stPTM.q_xReset:= FALSE;
	iq_stPTM.xResetSW := FALSE; 
 END_IF
 

(*soft IO mapping*)
ACT_IO();
]]></ST>
    </Implementation>
    <Action Name="ACT_IO" Id="{3ede8d23-8566-4337-9266-6da353ee69b7}">
      <Implementation>
        <ST><![CDATA[(*soft io mapping*)
(*inputs*)
	iq_stPTM.i_xDecel := i_xDecel ;
	iq_stPTM.i_xAccel :=	i_xAccel ;
	iq_stPTM.i_xRotate :=	i_xRotate;
	iq_stPTM.i_xNCFault :=	i_xNCFault ;
	iq_stPTM.i_xAtSpd := i_xAtSpd;
	iq_stPTM.i_iRawSpeed :=	i_iRawSpeed;
//V (AI/32767*10) * (33600 {Max RPM} - 100) / 5
(*outputs*)
	q_xStart:= iq_stPTM.q_xStart;
	q_xStop := iq_stPTM.q_xStop;
	q_xReset := iq_stPTM.q_xReset;
	q_xProtection := iq_stPTM.q_xProtection;
	q_xSetSpeed := iq_stPTM.iq_xSpeedSet;
(*Validate Set Speed within range *) 
IF iq_stPTM.q_iSpeedSet  >= i_iMinSpeedRPM AND iq_stPTM.q_iSpeedSet  <=i_iMaxSpeedRPM THEN 
	q_iSpeedSet  := LIMIT(0, DINT_TO_INT((iq_stPTM.q_iSpeedSet - i_iMinSpeedRPM) / i_iMaxSpeedRPM *16383/5),16383); //Max 5V
	//:= DINT_TO_INT((q_iSpeedSet-100) / 33600 *32767/2); //Max 5V
END_IF

(* Pump speed calculation *)
IF iq_stPTM.i_iRawSpeed / (EXPT(2,i_iADCBits)-1) * 10 >= 0.2 THEN //Speed reading appears to zero at ~0.16V
iq_stPTM.i_diCurSpd := LREAL_TO_DINT(iq_stPTM.i_iRawSpeed/(EXPT(2,i_iADCBits)-1)*67000);
//V (AI/(2^{# ADC bits} -1 ) * 10[ADC 10V scaling]) * (33600 [Max RPM] - 100) / 5
ELSE
	iq_stPTM.i_diCurSpd := 0;
END_IF

//Normally closed fault handling
iq_stPTM.i_xFault := NOT iq_stPTM.i_xNCFault; //??]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="FB_PTM_Ebara_011M">
      <LineId Id="3" Count="0" />
      <LineId Id="71" Count="0" />
      <LineId Id="4" Count="10" />
      <LineId Id="18" Count="0" />
      <LineId Id="20" Count="0" />
      <LineId Id="22" Count="3" />
      <LineId Id="122" Count="3" />
      <LineId Id="30" Count="6" />
      <LineId Id="38" Count="1" />
      <LineId Id="99" Count="4" />
      <LineId Id="105" Count="1" />
      <LineId Id="104" Count="0" />
      <LineId Id="107" Count="12" />
      <LineId Id="50" Count="0" />
      <LineId Id="120" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_PTM_Ebara_011M.ACT_IO">
      <LineId Id="2" Count="4" />
      <LineId Id="8" Count="1" />
      <LineId Id="12" Count="20" />
      <LineId Id="36" Count="1" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>