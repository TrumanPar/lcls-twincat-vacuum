<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.18">
  <POU Name="FB_CCM501" Id="{a694e345-1167-47e5-8470-6cec1a701b87}" SpecialFunc="None">
    <Declaration><![CDATA[(* This function is for the Cold Cathode CCM 501 fro instrutech (hornet). *)
(*This function provides ILK and Set Point Protection for the Cold Cathode*)

FUNCTION_BLOCK FB_CCM501 EXTENDS FB_GaugeBase
VAR_IN_OUT
		
END_VAR
VAR_INPUT
	PG	:	ST_VG;
END_VAR
VAR_OUTPUT
{attribute 'pytmc' := '
    pv: 
	'}
	IG : ST_VG;
END_VAR
VAR
	rV : REAL;
	GaugeTurnOnTmr : TON;
	iTermBits: UINT := 32767 ; // The terminal's maximum value in bits
	(*IOs to be linked*)
	/// Controls and I/Os
	i_iPRESS_R AT %I* :INT; // input Pressure // Link to analog Input
	q_xHV_DIS AT %Q* : BOOL; // Enable High Voltage when True // 'TcLinkTo' (EP2624) ^Output
	// only for EL and ES terminal
	i_xHV_ON AT %I*	: BOOL; //  True when High Voltage is on  // 'TcLinkTo' (EL1124) ^Input
	i_xDisc_Active AT %I* : BOOL;// Discharge Current Active // 'TcLinkTo' (EL1124) ^Input
	
END_VAR

VAR CONSTANT
	// Ranges has to match the configurator software
	vBase : REAL := 1.25;
	vDisconnected : REAL:= 1.8;
	vTorr : REAL := 12.875; 
	vGaugeOff: REAL := 9.8;
	//vNoDischarge: REAL := 9.3;
	MinPressure: REAL := 1E-10;
	cDefaultPressure : REAL := 0;
	rDeadband : REAL :=0.3;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* 500 Logarithmic Output Conversion, factory default configuration *)
If (iTermBits=0) THEN iTermBits := 32767;END_IF
rV := 10*INT_TO_REAL(IG.i_iPRESS_R)/iTermBits;

(* Set Guage State based on the Analog voltage*)
IF rV < vDisconnected THEN
	IG.eState := GaugeDisconnected;
	IG.rPRESS := cDefaultPressure;
ELSIF rV >= vDisconnected AND rV < (vGaugeOff -rDeadband)  THEN
	IG.eState := Valid;
	IG.rPRESS := LREAL_TO_REAL(EXPT(10,((rV*vBase)- vTorr)));
ELSIF rV >= (vGaugeOff -rDeadband) THEN
	IG.eState := Off;
	//IG.rPRESS := LREAL_TO_REAL(EXPT(10,((rV-vBase)/vSlope+LOG(pBase))));
	IG.rPRESS := cDefaultPressure;
ELSE
	IG.eState := OoR;
	//IG.rPRESS := LREAL_TO_REAL(EXPT(10,((rV-vBase)/vSlope+LOG(pBase))));
	IG.rPRESS := cDefaultPressure;
END_IF



(* Ion Gauge Protection Functions *)
(* If the PG pressure is greater than the VG.PRO_SP then the gauge is disabled *)
(* If the PG pressure is less than the VG.PRO_SP then the gauge is enabled *)
(* This FB also implements some hysteresis so the gauge doesn't have rapid power cycling while near the turn on boundary *)


IF PG.rPRESS <= IG.rPRO_SP AND PG.xPRESS_OK THEN
	IG.q_xHV_DIS := IG.xHV_SW;
	IG.xILKOk := TRUE;
ELSIF IG.q_xHV_DIS THEN
	IF IG.rPRESS > (IG.rPRO_SP + IG.rHYS_PR)  OR PG.rPRESS > (IG.rPRO_SP + IG.rHYS_PR) THEN
		IG.q_xHV_DIS := FALSE;
		IG.xHV_SW := FALSE;
	END_IF
ELSE
	IG.q_xHV_DIS := FALSE;
	IG.xHV_SW := FALSE;
	IG.xILKOk := FALSE;
END_IF

(* Pressure gauge OK checks *)

GaugeTurnOnTmr(IN:=IG.q_xHV_DIS, PT:=T#10S, Q=>IG.xTurnOnTime);


//Backwards compatibility
IG.xPRESS_OK := (IG.eState = Valid) OR IG.xBAKEOUT;

(* Setpoint evaluation *)
IG.xAT_VAC := (IG.xPRESS_OK AND (IG.rPRESS < IG.rVAC_SP)) OR IG.xBAKEOUT AND (IG.eState = Valid) ;

ACT_Logger();
(*Soft IO Linking*)
// check ethercat Diagnostics
IO();
]]></ST>
    </Implementation>
    <Action Name="ACT_Logger" Id="{99961f85-7dce-4ed0-bee5-af963152edee}">
      <Implementation>
        <ST><![CDATA[// ILK logger
IF (IG.xLog) THEN
	IF NOT IG.xILKOk AND IG.q_xHV_DIS THEN
			fbLogger(sMsg:='Lost external interlock while gauge was on.', eSevr:=TcEventSeverity.Critical);  	
	END_IF
	
	
	// Log Action
	tAction(CLK:=   IG.xHV_SW);
	IF tAction.Q THEN fbLogger(sMsg:='Ion gauge commanded to switch on', eSevr:=TcEventSeverity.Info); END_IF
	
	
	
	//STATE Logger  
	tState(CLK:=  ePrevState <> IG.eState);
	IF ePrevState <> IG.eState THEN
		  CASE IG.eState OF
			ValidHi:
				fbLogger(sMsg:='Gauge pressure valid high.', eSevr:=TcEventSeverity.Info);
			ValidLo:
				fbLogger(sMsg:='Gauge pressure valid low.', eSevr:=TcEventSeverity.Info);
			Valid:
				fbLogger(sMsg:='Gauge pressure valid.', eSevr:=TcEventSeverity.Info);
			GaugeDisconnected:
				fbLogger(sMsg:='Gauge Disconnected.', eSevr:=TcEventSeverity.Critical);
			PressInvalid:
				fbLogger(sMsg:='Gauge pressure invalid.', eSevr:=TcEventSeverity.Warning);
			OoR:
				fbLogger(sMsg:='Gauge pressure out of range.', eSevr:=TcEventSeverity.Warning);
			Starting:
				fbLogger(sMsg:='Gauge starting.', eSevr:=TcEventSeverity.Info);
		  END_CASE
		  ePrevState := IG.eState;  
	  END_IF
END_IF  

]]></ST>
      </Implementation>
    </Action>
    <Action Name="IO" Id="{d8491859-09d0-4a11-84b1-64e10f403b2b}">
      <Implementation>
        <ST><![CDATA[(*soft link inputs*)
IG.i_iPRESS_R:=	i_iPRESS_R; 
IG.i_xHV_ON:= i_xHV_ON;
IG.i_xDisc_Active:=i_xDisc_Active; 
(*soft link outputs*)
q_xHV_DIS := IG.q_xHV_DIS;

IG.sPath := sPath;]]></ST>
      </Implementation>
    </Action>
    <Method Name="M_HVE" Id="{5c60ca96-2d6b-4374-b0f5-03f29913a437}">
      <Declaration><![CDATA[METHOD M_HVE : BOOL
VAR_INPUT
		enable:bool; // set to true to enable, false to disable;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
this^.IG.xHV_SW:= enable;]]></ST>
      </Implementation>
    </Method>
    <Method Name="M_SetBits" Id="{72c14520-2c59-468a-859d-9b3fd8e0ae82}">
      <Declaration><![CDATA[METHOD M_SetBits : BOOL
VAR_INPUT
	TermBits : UINT; // The terminal's maximum value in bits
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[This^.iTermBits := TermBits;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>