<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.12">
  <POU Name="FB_MKS422" Id="{2e4ef3e9-09c8-44c2-b5f5-464ffb8c18a0}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_MKS422
VAR_IN_OUT
		
END_VAR
VAR_INPUT
		PG	:	ST_VG; // Pirani Gauge Structure used to Interlock the Cold Cathode
END_VAR
VAR_OUTPUT
	{attribute 'pytmc' := '
    pv: GCC
	'}
	IG : ST_VG; // The Cold Cathode Data Structure
END_VAR
VAR
	rV	:	REAL;
	
	(*IOs to be linked*)
	/// Controls and I/Os
	i_iPRESS_R AT %I* :INT; // input Pressure // Link to analog Input
	q_xHV_DIS AT %Q* : BOOL; // Enable High Voltage when True // 'TcLinkTo' (EL2624) ^Output
	
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* 937B Logarithmic Output Conversion *)
(* 5-20-2016, Alex Wallace and Scott Stubbs *)
(* 09-28-2018, Margaret Ghaly *)
(* This function will read the pressure from any gauge on a 937B. *)

rV := 10*INT_TO_REAL(IG.i_iPRESS_R)/32767;
IG.rPRESS := LREAL_TO_REAL(EXPT(10,(rV-7.2)/0.6));



IF (rV <=9.7 ) AND (rV>=0.6) THEN
	IG.eState := Valid; // normal
ELSIF rV >= 0.18 AND rV <= 0.22 THEN
	IG.eState := ValidLo; //LO
ELSIF rV > 9.7 AND rV<= 9.9 THEN
	IG.eState := ValidHi; //HIGH
ELSIF rV < 0.18 THEN
	IG.eState := GaugeDisconnected; //not on
ELSE
	IG.eState := PressInvalid; //other fault - could be no gauge, controller powering up etc
END_IF


(* Ion Gauge Protection Functions *)
(* If the PG pressure is greater than the VG.PRO_SP then the gauge is disabled *)
(* If the PG pressure is less than the VG.PRO_SP then the gauge is enabled *)
(* This FB also implements some hysteresis so the gauge doesn't have rapid power cycling while near the turn on boundary *)

IF PG.rPRESS <= IG.rPRO_SP THEN
	IG.q_xHV_DIS := IG.xHV_SW;

ELSIF IG.q_xHV_DIS THEN
	IF IG.rPRESS > (IG.rPRO_SP + IG.rHYS_PR) OR PG.rPRESS > (IG.rPRO_SP + IG.rHYS_PR) THEN
		IG.q_xHV_DIS := FALSE;
		IG.xHV_SW := FALSE;
	END_IF
ELSE
	IG.xHV_SW := FALSE;
END_IF

(* Pressure gauge OK checks *)
IG.xPRESS_OK := (rV <=9.6 ) AND (rV>=0.6);


(* Setpoint evaluation *)
IG.xAT_VAC := IG.xPRESS_OK AND IG.rPRESS < IG.rVAC_SP;


(*Soft IO Linking*)
// check ethercat Diagnostics
IO();

]]></ST>
    </Implementation>
    <Action Name="IO" Id="{745bf75f-6d68-4d34-a177-a78f14818649}">
      <Implementation>
        <ST><![CDATA[(*soft link inputs*)
IG.i_iPRESS_R:=	i_iPRESS_R; 

(*soft link outputs*)
q_xHV_DIS := IG.q_xHV_DIS;]]></ST>
      </Implementation>
    </Action>
    <LineIds Name="FB_MKS422">
      <LineId Id="3" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="4" Count="4" />
      <LineId Id="107" Count="0" />
      <LineId Id="110" Count="11" />
      <LineId Id="108" Count="0" />
      <LineId Id="9" Count="7" />
      <LineId Id="18" Count="3" />
      <LineId Id="123" Count="0" />
      <LineId Id="22" Count="1" />
      <LineId Id="124" Count="0" />
      <LineId Id="25" Count="2" />
      <LineId Id="122" Count="0" />
      <LineId Id="28" Count="0" />
      <LineId Id="42" Count="1" />
      <LineId Id="147" Count="0" />
      <LineId Id="150" Count="0" />
      <LineId Id="44" Count="0" />
      <LineId Id="105" Count="0" />
      <LineId Id="180" Count="1" />
      <LineId Id="45" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_MKS422.IO">
      <LineId Id="2" Count="1" />
      <LineId Id="5" Count="1" />
      <LineId Id="1" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>